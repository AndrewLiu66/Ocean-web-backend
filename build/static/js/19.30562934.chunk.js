(this["webpackJsonpmatx-react-pro"]=this["webpackJsonpmatx-react-pro"]||[]).push([[19],{1310:function(e,t,r){"use strict";r.r(t),r.d(t,"getGeometryServiceURL",(function(){return c})),r.d(t,"projectGeometry",(function(){return u}));var n=r(335),i=r(145),o=r(240),a=r(1066),l=r(845);async function c(){var e,t;let r,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,l=arguments.length>1?arguments[1]:void 0;if(n.a.geometryServiceUrl)return n.a.geometryServiceUrl;if(!a)throw new i.a("internal:geometry-service-url-not-configured");r="portal"in a?a.portal||o.a.getDefault():a,await r.load({signal:l});const c=null===(e=r.helperServices)||void 0===e||null===(t=e.geometry)||void 0===t?void 0:t.url;if(!c)throw new i.a("internal:geometry-service-url-not-configured");return c}async function u(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=arguments.length>3?arguments[3]:void 0;const o=await c(r,n),u=new l.a;u.geometries=[e],u.outSpatialReference=t;const s=await Object(a.a)(o,u,{signal:n});if(s&&Array.isArray(s)&&1===s.length)return s[0];throw new i.a("internal:geometry-service-projection-failed")}}}]);