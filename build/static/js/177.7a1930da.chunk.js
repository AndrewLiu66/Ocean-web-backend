(this["webpackJsonpmatx-react-pro"]=this["webpackJsonpmatx-react-pro"]||[]).push([[177],{1189:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return d}));r(164);var s=r(135),o=r(1066),a=r(448),i=r(770),c=r(275),n=r(481),l=r(574),m=r(449),f=r(1070),u=r(916),O=r(533),b=r(161);class d{convertVectorFieldData(e){const t=a.a.fromJSON(e.pixelBlock),r=Object(m.b)(t,e.type);return Promise.resolve(Object(s.k)(r)&&r.toJSON())}async decode(e){const t=await Object(i.a)(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.a.fromJSON(e.pixelBlock),e.extent=e.extent?b.a.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(Object(s.k)(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=u.a.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null===(t=this.symbolizer)||void 0===t?void 0:t.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(Object(s.k)(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=Object(l.e)(a.a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=Object(c.l)(a.a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach(((e,r)=>{t.set(r,null===e||void 0===e?void 0:e.toJSON())})),Promise.resolve(t)}async mosaicAndTransform(e){var t;const r=e.srcPixelBlocks.map((e=>e?new a.a(e):null)),o=Object(c.h)(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,n=o;return e.coefs&&(n=Object(c.a)(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=Object(c.e)(e.destDimension,e.gcsGrid),n=Object(s.q)(Object(m.a)(n,e.isUV?"vector-uv":"vector-magdir",i))),{pixelBlock:null===(t=n)||void 0===t?void 0:t.toJSON(),localNorthDirections:i}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await Object(O.a)(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=b.a.fromJSON(e.projectedExtent),r=b.a.fromJSON(e.srcBufferExtent);let s=null;e.datumTransformationSteps&&(s=new o.a({steps:e.datumTransformationSteps})),(e.includeGCSGrid||Object(n.k)(t.spatialReference,r.spatialReference,s))&&await Object(n.g)();const a=e.rasterTransform?Object(f.b)(e.rasterTransform):null;return Object(n.c)({...e,projectedExtent:t,srcBufferExtent:r,datumTransformation:s,rasterTransform:a})}}}}]);